#!/usr/bin/env python3

import re
import sys
import typing
from dataclasses import dataclass, field
from typing import List,Dict,Optional,Annotated
from arcaflow_plugin_sdk import plugin,schema,annotations
import subprocess
import datetime
import yaml


@dataclass
class KubeBurnerInputParams:
    """
    This is the data structure for the input parameters for kube-burner workloads.
    """

    workload: str = field(
        metadata={
            "name": "Name",
            "description": "workload name",
        }
    )
    kubeconfig: str = field(
        metadata={
            "name": "kubeconfig",
            "description": "Openshift cluster kubeconfig file content as a string"
        }
    )
    uuid: Optional[str] = field(
        default=None,
        metadata={
            "name": "uuid",
            "description": "uuid to be used for the job",
        }
    )
    qps: Optional[int] = field(
        default=20,
        metadata={
            "name": "QPS",
            "description": "Max number of queries per second",
        }
    )
    burst: Optional[int] = field(
        default=20,
        metadata={
            "name": "Burst",
            "description": "Maximum burst for throttle",
        }
    )
    es_index: Optional[str] = field(
        default=None,
        metadata={
            "name": "es-index",
            "description": "The ElasticSearch index used to index the metrics",
        }
    )
    es_server: Optional[str] = field(
        default=None,
        metadata={
            "name": "es-server",
            "description": "List of ES instances",
        }
    )
    log_level: str = field(
        default='info',
        metadata={
            "name": "log-level",
            "description": "Allowed values: trace, debug, info, warn, error, fatal",
        }
    )
    timeout: Optional[str] = field(
        default='2h',
        metadata={
            "name": "timeout",
            "description": "Benchmark timeout",
        }
    )
    pods_per_node: Optional[int] = field(
        default= 245,
        metadata={
            "name": "pods-per-node",
            "description": "Pods per node for node-density* workloads",
        }
    )
            
    pod_ready_threshold: Optional[str] = field(
        default='5s',
        metadata={
            "name": "pod-ready-threshold",
            "description": "Pod ready timeout threshold for node-density workload",
        }
    )
    iterations: Optional[int] = field(
        default=500,
        metadata={
            "name": "iterations",
            "description": "Cluster-density iterations",
        }
    )
    alerting: Optional[bool] = field(
        default=True,
        metadata={
            "name": "alerting",
            "description": "Enable alerting",
        }
    )
    gc: Optional[bool] = field(
        default=True,
        metadata={
            "name": "gc",
            "description": "Garbage collect created namespaces",
        }
    )



@dataclass
class SuccessOutput:
    """
    This is the data structure for output returned by kube-burner workloads.
    """
    uuid: str = field(metadata={"name": "UUID", "description": "UUID used for this workload run"})
    output: str = field(metadata={"name": "Kube burner workload output", "description": "Output generated by the kube burner workload"})



@dataclass
class ErrorOutput:
    """
    This is the output data structure in the error case.
    """
    exit_code: int = field(metadata={
        "name": "Exit Code", "description": "Exit code returned by the program in case of a failure"})
    error: str = field(metadata={
        "name": "Failure Error", "description": "Reason for failure"})


kube_burner_input_schema = plugin.build_object_schema(KubeBurnerInputParams)
kube_burner_output_schema = plugin.build_object_schema(ErrorOutput)
node_density_params = [ 'uuid', 'qps', 'burst', 'es_index', 'es_server', 'log_level', 'timeout', 'pods_per_node', 'pod_ready_threshold', 'alerting', 'gc']
cluster_density_params = [ 'uuid', 'qps', 'burst', 'es_index', 'es_server', 'log_level', 'iterations', 'timeout', 'alerting', 'gc']